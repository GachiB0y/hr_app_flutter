// Mocks generated by Mockito 5.4.3 from annotations
// in hr_app_flutter/test/lean_production_test/lean_prodaction_api_provider_test/lean_prodaction_api_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hr_app_flutter/core/components/database/rest_clients/api_client.dart'
    as _i3;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamedResponse_0 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HTTPServiceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHTTPServiceImpl extends _i1.Mock implements _i3.HTTPServiceImpl {
  @override
  _i4.Future<dynamic> getTest({
    required String? uri,
    required String? userToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTest,
          [],
          {
            #uri: uri,
            #userToken: userToken,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<_i2.StreamedResponse> get({
    required String? uri,
    required String? userToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #uri: uri,
            #userToken: userToken,
          },
        ),
        returnValue:
            _i4.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_0(
          this,
          Invocation.method(
            #get,
            [],
            {
              #uri: uri,
              #userToken: userToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_0(
          this,
          Invocation.method(
            #get,
            [],
            {
              #uri: uri,
              #userToken: userToken,
            },
          ),
        )),
      ) as _i4.Future<_i2.StreamedResponse>);
  @override
  _i4.Future<_i2.StreamedResponse> put({
    required String? uri,
    required String? userToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [],
          {
            #uri: uri,
            #userToken: userToken,
          },
        ),
        returnValue:
            _i4.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_0(
          this,
          Invocation.method(
            #put,
            [],
            {
              #uri: uri,
              #userToken: userToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_0(
          this,
          Invocation.method(
            #put,
            [],
            {
              #uri: uri,
              #userToken: userToken,
            },
          ),
        )),
      ) as _i4.Future<_i2.StreamedResponse>);
  @override
  _i4.Future<_i2.StreamedResponse> post({
    required String? uri,
    required String? body,
    required String? userToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [],
          {
            #uri: uri,
            #body: body,
            #userToken: userToken,
          },
        ),
        returnValue:
            _i4.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_0(
          this,
          Invocation.method(
            #post,
            [],
            {
              #uri: uri,
              #body: body,
              #userToken: userToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_0(
          this,
          Invocation.method(
            #post,
            [],
            {
              #uri: uri,
              #body: body,
              #userToken: userToken,
            },
          ),
        )),
      ) as _i4.Future<_i2.StreamedResponse>);
  @override
  _i4.Future<_i2.StreamedResponse> postWithFile({
    required String? uri,
    required String? userToken,
    required List<String>? paths,
    Map<String, String>? fieldsNew,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postWithFile,
          [],
          {
            #uri: uri,
            #userToken: userToken,
            #paths: paths,
            #fieldsNew: fieldsNew,
          },
        ),
        returnValue:
            _i4.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_0(
          this,
          Invocation.method(
            #postWithFile,
            [],
            {
              #uri: uri,
              #userToken: userToken,
              #paths: paths,
              #fieldsNew: fieldsNew,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_0(
          this,
          Invocation.method(
            #postWithFile,
            [],
            {
              #uri: uri,
              #userToken: userToken,
              #paths: paths,
              #fieldsNew: fieldsNew,
            },
          ),
        )),
      ) as _i4.Future<_i2.StreamedResponse>);
}

/// A class which mocks [StreamedResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamedResponse extends _i1.Mock implements _i2.StreamedResponse {
  @override
  _i2.ByteStream get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.dummyValue<_i2.ByteStream>(
          this,
          Invocation.getter(#stream),
        ),
        returnValueForMissingStub: _i5.dummyValue<_i2.ByteStream>(
          this,
          Invocation.getter(#stream),
        ),
      ) as _i2.ByteStream);
  @override
  int get statusCode => (super.noSuchMethod(
        Invocation.getter(#statusCode),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
  @override
  bool get isRedirect => (super.noSuchMethod(
        Invocation.getter(#isRedirect),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
