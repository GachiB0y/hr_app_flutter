// Mocks generated by Mockito 5.4.3 from annotations
// in hr_app_flutter/test/lean_production_test/lean_production_repo_test/lean_production_repo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:hr_app_flutter/features/services/model/lean_productions_entity/lean_production_form_entity/lean_production_form_entity.dart'
    as _i2;
import 'package:hr_app_flutter/features/services/model/lean_productions_entity/my_lean_productions_entity/my_lean_productions_entity.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _Fake$LeanProductionFormEntityCopyWith_0<$Res> extends _i1.SmartFake
    implements _i2.$LeanProductionFormEntityCopyWith<$Res> {
  _Fake$LeanProductionFormEntityCopyWith_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$MyLeanProductionsEntityCopyWith_2<$Res> extends _i1.SmartFake
    implements _i3.$MyLeanProductionsEntityCopyWith<$Res> {
  _Fake$MyLeanProductionsEntityCopyWith_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LeanProductionFormEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockLeanProductionFormEntity extends _i1.Mock
    implements _i2.LeanProductionFormEntity {
  @override
  bool get realized => (super.noSuchMethod(
        Invocation.getter(#realized),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int get firstImplementer => (super.noSuchMethod(
        Invocation.getter(#firstImplementer),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get secondImplementer => (super.noSuchMethod(
        Invocation.getter(#secondImplementer),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get thirdImplementer => (super.noSuchMethod(
        Invocation.getter(#thirdImplementer),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  String get issue => (super.noSuchMethod(
        Invocation.getter(#issue),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#issue),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#issue),
        ),
      ) as String);
  @override
  String get solution => (super.noSuchMethod(
        Invocation.getter(#solution),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#solution),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#solution),
        ),
      ) as String);
  @override
  String get expenses => (super.noSuchMethod(
        Invocation.getter(#expenses),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#expenses),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#expenses),
        ),
      ) as String);
  @override
  String get benefit => (super.noSuchMethod(
        Invocation.getter(#benefit),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#benefit),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#benefit),
        ),
      ) as String);
  @override
  List<String> get paths => (super.noSuchMethod(
        Invocation.getter(#paths),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  _i2.$LeanProductionFormEntityCopyWith<_i2.LeanProductionFormEntity>
      get copyWith => (super.noSuchMethod(
            Invocation.getter(#copyWith),
            returnValue: _Fake$LeanProductionFormEntityCopyWith_0<
                _i2.LeanProductionFormEntity>(
              this,
              Invocation.getter(#copyWith),
            ),
            returnValueForMissingStub: _Fake$LeanProductionFormEntityCopyWith_0<
                _i2.LeanProductionFormEntity>(
              this,
              Invocation.getter(#copyWith),
            ),
          ) as _i2
              .$LeanProductionFormEntityCopyWith<_i2.LeanProductionFormEntity>);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [MyLeanProductionsEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyLeanProductionsEntity extends _i1.Mock
    implements _i3.MyLeanProductionsEntity {
  @override
  DateTime get date => (super.noSuchMethod(
        Invocation.getter(#date),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.getter(#date),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.getter(#date),
        ),
      ) as DateTime);
  @override
  String get number => (super.noSuchMethod(
        Invocation.getter(#number),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#number),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#number),
        ),
      ) as String);
  @override
  String get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#status),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#status),
        ),
      ) as String);
  @override
  String get issue => (super.noSuchMethod(
        Invocation.getter(#issue),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#issue),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#issue),
        ),
      ) as String);
  @override
  String get solution => (super.noSuchMethod(
        Invocation.getter(#solution),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#solution),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#solution),
        ),
      ) as String);
  @override
  String get expenses => (super.noSuchMethod(
        Invocation.getter(#expenses),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#expenses),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#expenses),
        ),
      ) as String);
  @override
  String get benefit => (super.noSuchMethod(
        Invocation.getter(#benefit),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#benefit),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#benefit),
        ),
      ) as String);
  @override
  List<_i3.ImplementsForLeanProdInfo> get implementers => (super.noSuchMethod(
        Invocation.getter(#implementers),
        returnValue: <_i3.ImplementsForLeanProdInfo>[],
        returnValueForMissingStub: <_i3.ImplementsForLeanProdInfo>[],
      ) as List<_i3.ImplementsForLeanProdInfo>);
  @override
  List<_i3.FileElement> get files => (super.noSuchMethod(
        Invocation.getter(#files),
        returnValue: <_i3.FileElement>[],
        returnValueForMissingStub: <_i3.FileElement>[],
      ) as List<_i3.FileElement>);
  @override
  _i3.$MyLeanProductionsEntityCopyWith<_i3.MyLeanProductionsEntity>
      get copyWith => (super.noSuchMethod(
            Invocation.getter(#copyWith),
            returnValue: _Fake$MyLeanProductionsEntityCopyWith_2<
                _i3.MyLeanProductionsEntity>(
              this,
              Invocation.getter(#copyWith),
            ),
            returnValueForMissingStub: _Fake$MyLeanProductionsEntityCopyWith_2<
                _i3.MyLeanProductionsEntity>(
              this,
              Invocation.getter(#copyWith),
            ),
          ) as _i3
              .$MyLeanProductionsEntityCopyWith<_i3.MyLeanProductionsEntity>);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
